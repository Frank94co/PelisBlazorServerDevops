@page  "/personas"
@inject PersonasRepo repo
@inject IMostrarMensajes mostrarMensajes
@attribute [Authorize(Roles = "admin")]

<h3>Índice de personas</h3>
<div class="form-group">
    <a class="btn btn-info" href="personas/crear">Crear persona</a>
</div>

<Paginacion PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"
            PaginasTotales="paginasTotales"></Paginacion>

<ListadoGenerico Listado="Personas">
    <HayRegistrosCompleto>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Personas)
                {
                    <tr>
                        <td>
                            <a href="/personas/editar/@item.Id" class="btn btn-success">Editar</a>
                            <button @onclick="@(()=>BorrarPersona(item))" class="btn btn-danger">Borrar</button>
                        </td>
                        <td>@item.Nombre</td>
                    </tr>
                }
            </tbody>
        </table>
    </HayRegistrosCompleto>
</ListadoGenerico>

@code {
    public List<Persona> Personas { get; set; }
    private int paginaActual = 1;
    private int paginasTotales;

    protected async override Task OnInitializedAsync()
    {
        await Cargar();
    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await Cargar(pagina);
    }

    private async Task Cargar(int pagina = 1)
    {
        var pagedResponse = await repo.Get(new DTOs.Paginacion { Pagina = pagina });
        Personas = pagedResponse.Records;
        paginasTotales = pagedResponse.TotalPages;
        
    }

    private async Task BorrarPersona(Persona persona)
    {
        await repo.Delete(persona.Id);
        await Cargar();
    }
}